# Permissionless Submission Backend

A modern, hackathon-ready backend for grant and tender submissions via Firebase, Bitcoin wallets, and Zaprite payments.

---

## üîß Tech Stack
- **Node.js** / **Express.js**
- **TypeScript**
- **Firebase Admin SDK** (Firestore)
- **Zaprite API** for Bitcoin/Fiat payments
- **Xverse Wallet** pubkey support
- **.env-based config** for secrets

---

## üìÅ Folder Structure
```
/server
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ controllers      # Route logic
‚îÇ   ‚îú‚îÄ‚îÄ routes           # Express routers
‚îÇ   ‚îú‚îÄ‚îÄ services         # External integrations (Firebase, Zaprite)
‚îÇ   ‚îî‚îÄ‚îÄ index.ts         # App entrypoint
‚îú‚îÄ‚îÄ .env                 # Env variables
‚îî‚îÄ‚îÄ firebase-adminsdk.json  # Firebase secret (NOT COMMITTED)
```

---

## üöÄ Getting Started

### 1. Clone the repo
```bash
git clone https://github.com/yourorg/permissionless-backend.git
cd permissionless-backend/server
```

### 2. Install dependencies
```bash
npm install
```

### 3. Setup Firebase
- Go to [Firebase Console](https://console.firebase.google.com/)
- Create a project > Generate a service account
- Download `firebase-adminsdk.json` and place it in `/server/`

### 4. Setup `.env`
```
PORT=5000
ZAPRITE_API_KEY=your-zaprite-key-here
```

### 5. Run the server locally
```bash
npm run dev
```

Server should run on `http://localhost:5000`

---

## üì¶ Deploying to Vercel
> While Vercel primarily serves frontend SSR/Next.js, you can deploy Express using API functions or a hybrid setup with Vercel CLI.

### Option A: Use Vercel as frontend only, and deploy backend on Render/Heroku

### Option B: Wrap Express with `vercel.json`
```json
{
  "rewrites": [
    { "source": "/api/(.*)", "destination": "/server/src/index.ts" }
  ]
}
```
Use Vercel CLI:
```bash
vercel --prod
```

---

## üì¨ API Endpoints Summary

### Auth Routes
```
GET /api/auth/linkedin
GET /api/auth/github
```

### Submission Routes
```
POST /api/submission/verify-voucher
POST /api/submission/create
```

### Bitcoin Routes
```
POST /api/bitcoin/wallet/link
POST /api/bitcoin/ordinals/store
POST /api/bitcoin/zaprite/pay
```

---

## üß† Roadmap
- Add file hash storage for OP_RETURN (PDF/Artworks)
- Add authentication & rate-limiting
- Auto-inscribe winners via Ordinals API

---

## ‚öñÔ∏è License
MIT ‚Äî feel free to use, fork, extend!

---

_üí° Built during the PERMISSIONLESS HACKATHON by a fullstack team with love for Bitcoin & Open Grants._
